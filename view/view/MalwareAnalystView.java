package view;

import controller.ThreatController;
import controller.EvidenceController;
import controller.MalwareAnalysisController;
import controller.MalwareSampleController;
import controller.LogController;
import models.Threat;
import models.Evidence;
import models.Log;
import models.MalwareAnalysis;
import models.MalwareSample;
import models.User;
import models.enums.Enumeration.RiskLevel;

import java.sql.Timestamp;
import java.util.List;
import java.util.Scanner;

public class MalwareAnalystView {
    private final ThreatController threatController;
    private final LogController logController;
    private final EvidenceController evidenceController;
    private final MalwareAnalysisController malwareAnalysisController;
    private final MalwareSampleController malwareSampleController;
    private final Scanner scanner;

    public MalwareAnalystView() {
        this.threatController = new ThreatController();
        this.logController = new LogController();
        this.evidenceController = new EvidenceController();
        this.malwareAnalysisController =new MalwareAnalysisController();
        this.malwareSampleController =new MalwareSampleController();
        this.scanner = new Scanner(System.in);
    }

    public void showMalwareAnalystMenu(User user) {
        int choice = -1;
        do {
            System.out.println("\n=== Malware Analyst Dashboard ===");
            System.out.println("1. View All Threats");
            System.out.println("2. View Evidence Linked to Threat");
            System.out.println("3. View Evidence Linked to Incident");
            System.out.println("4. Add Malware Analysis Report");
            System.out.println("5. Update Malware Analysis Report");
            System.out.println("6. Delete Malware Analysis Report");
            System.out.println("7. Add Malware Sample");
            System.out.println("8. Update Malware Sample");
            System.out.println("0. Logout");
            System.out.print("Enter your choice: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (Exception e) {
                System.out.println(" Invalid input.");
                continue;
            }
 
            switch (choice) {
                case 1:
                    List<Threat> threats = threatController.getAllThreats();
                    threats.forEach(i ->
                    System.out.println("Threat #" + i.getThreatId() + ": " + i.getName() + " [" + i.getType() + "]"+
                                    "\nSeverity: "+i.getSeverity()+"\nThreat Description: "+i.getDescription()+
                                    "\nDetected on: "+i.getDetectedDate()+"\nRelated Incident: "+i.getRelatedIncident()));
                    logController.addLog(new Log(user.getUserId(), "VIEWED ALL THREATS",new Timestamp(System.currentTimeMillis())));
                    break;
                
                case 2:
                    System.out.println("Enter Threat ID: ");
                    int threatId =Integer.parseInt(scanner.nextLine());
                    List<Evidence> evidences = evidenceController.getEvidencesByThreatId(threatId);
                    evidences.forEach(e ->
                    System.out.println("Evidence #"+e.getEvidenceId()+"["+e.getEvidenceType()+"]"+
                                        "\nDescription: "+e.getDescription()+"\nCollected By: "+e.getCollectedBy()+
                                        "\nCollected on: "+e.getCollectedDate()+"\nRelated Incident: "+e.getIncidentId()));
                    logController.addLog(new Log(user.getUserId(), "VIEWED EVIDENCES OF A THREAT",new Timestamp(System.currentTimeMillis())));
                    break;

                case 3:
                    System.out.println("Enter Incident ID: ");
                    int incId =Integer.parseInt(scanner.nextLine());
                    List<Evidence> evidence = evidenceController.getEvidencesByIncidentId(incId);
                    evidence.forEach(e ->
                    System.out.println("Evidence #"+e.getEvidenceId()+"["+e.getEvidenceType()+"]"+
                                        "\nDescription: "+e.getDescription()+"\nCollected By: "+e.getCollectedBy()+
                                        "\nCollected on: "+e.getCollectedDate()+"\nRelated Incident: "+e.getIncidentId()));
                    logController.addLog(new Log(user.getUserId(), "VIEWED EVIDENCES OF AN INCIDENT",new Timestamp(System.currentTimeMillis())));
                    break;
                
                case 4:
                    System.out.print("Enter the malware sample ID: ");
                    int msid = Integer.parseInt(scanner.nextLine());
                    System.out.print("Enter the summary of the static analysis report(Type ; in a new line to finish): ");
                    StringBuilder sa = new StringBuilder();
                    while(true)
                    {
                        String l=scanner.nextLine();
                        if(l.equals(";"))
                        {
                            break;
                        }
                        sa.append(l).append("\n");
                    }
                    String stanal = sa.toString(); 
                    System.out.print("Enter the summary of the dynamic analysis report(Type ; in a new line to finish): ");
                    StringBuilder da = new StringBuilder();
                    while(true)
                    {
                        String l=scanner.nextLine();
                        if(l.equals(";"))
                        {
                            break;
                        }
                        da.append(l).append("\n");
                    }
                    String dyanal = da.toString(); 
                    RiskLevel ri = null;
                    while (ri == null) {
                        System.out.println("Select Risklevel:");
                        RiskLevel[] r = RiskLevel.values();
                        for(int i = 0; i < r.length; i++)
                        {
                            System.out.println((i + 1) + ". " + r[i]);
                        }
                        System.out.print("Enter choice: ");
                        try
                        {
                            int cho = Integer.parseInt(scanner.nextLine());
                            if (cho >= 1 && cho <= r.length)
                            {
                                ri = r[cho - 1];
                            }
                            else
                            {
                                System.out.println("Invalid selection.");
                            }
                        } 
                        catch (NumberFormatException e)
                        {
                            System.out.println("Please enter a number.");
                        }
                    }
                    malwareAnalysisController.addMalwareAnalysis(new MalwareAnalysis(msid, stanal, dyanal, ri,user.getUserId()));
                    logController.addLog(new Log(user.getUserId(), "ADDED NEW MALWARE ANALYSIS REPORT",new Timestamp(System.currentTimeMillis())));
                
                case 5:
                    System.out.print("Enter Analysis ID to update: ");
                    int analysisId = Integer.parseInt(scanner.nextLine());

                    MalwareAnalysis existingAnalysis = malwareAnalysisController.getMalwareAnalysisById(analysisId);
                    if (existingAnalysis == null) {
                        System.out.println("Analysis not found.");
                        break;
                    }

                    System.out.println("Enter a choice to Update:");
                    System.out.println("1. All Details of the Analysis");
                    System.out.println("2. Specific Detail of the Analysis");

                    int cho = -1;
                    while (cho != 1 && cho != 2) {
                        try {
                            cho = Integer.parseInt(scanner.nextLine());
                            if (cho != 1 && cho != 2) {
                                System.out.println("Invalid choice. Enter 1 or 2.");
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("Please enter a number.");
                        }
                    }

                    if (cho == 1) {
                        System.out.print("Enter the new summary of the static analysis report(Type ; in a new line to finish): ");
                        StringBuilder sta = new StringBuilder();
                        while(true)
                        {
                            String l=scanner.nextLine();
                            if(l.equals(";"))
                            {
                                break;
                            }
                            sta.append(l).append("\n");
                        }
                    
                        existingAnalysis.setStaticAnalysis(sta.toString());

                        System.out.print("Enter the new summary of the dynamic analysis report(Type ; in a new line to finish): ");
                        StringBuilder dya = new StringBuilder();
                        while(true)
                        {
                            String l=scanner.nextLine();
                            if(l.equals(";"))
                            {
                                break;
                            }
                            dya.append(l).append("\n");
                        }
                        existingAnalysis.setDynamicAnalysis(dya.toString());

                        System.out.println("Select New Risk Level:");
                        RiskLevel[] levels = RiskLevel.values();
                        for (int i = 0; i < levels.length; i++) {
                            System.out.println((i + 1) + ". " + levels[i]);
                        }
                        int rlChoice = Integer.parseInt(scanner.nextLine());
                        existingAnalysis.setRiskLevel(levels[rlChoice - 1]);

                        System.out.print("New Analyst User ID: ");
                        existingAnalysis.setAnalyzedBy(Integer.parseInt(scanner.nextLine()));

                        malwareAnalysisController.updateMalwareAnalysis(analysisId,existingAnalysis);
                        System.out.println("Malware Analysis updated.");

                    } else if (cho == 2) {
                        System.out.println("Select Column to Update:");
                        System.out.println("1. Static Analysis");
                        System.out.println("2. Dynamic Analysis");
                        System.out.println("3. Risk Level");
                        System.out.println("4. Analyzed By");

                        int ucho = -1;
                        while (ucho < 1 || ucho > 4) {
                            try {
                                ucho = Integer.parseInt(scanner.nextLine());
                                if (ucho < 1 || ucho > 4) {
                                    System.out.println("Invalid number, Try again.");
                                }
                            } catch (NumberFormatException e) {
                                System.out.println("Please enter a number.");
                            }
                        }

                        String col = "";
                        Object val = null;

                        if (ucho == 1) {
                            col = "static_analysis";
                            System.out.print("Enter new Static Analysis: ");
                            val = scanner.nextLine();
                        } else if (ucho == 2) {
                            col = "dynamic_analysis";
                            System.out.print("Enter new Dynamic Analysis: ");
                            val = scanner.nextLine();
                        } else if (ucho == 3) {
                            col = "risk_level";
                            RiskLevel[] levels = RiskLevel.values();
                            for (int i = 0; i < levels.length; i++) {
                                System.out.println((i + 1) + ". " + levels[i]);
                            }
                            int rlChoice = Integer.parseInt(scanner.nextLine());
                            val = levels[rlChoice - 1].name();
                        } else if (ucho == 4) {
                            col = "analyzed_by";
                            System.out.print("Enter new Analyst User ID: ");
                            val = Integer.parseInt(scanner.nextLine());
                        }

                        malwareAnalysisController.updateColumnMalwareAnalysis(analysisId, col, val);
                        System.out.println("Malware Analysis updated successfully.");
                    }
                    logController.addLog(new Log(user.getUserId(), "UPDATED MALWARE ANALYSIS REPORT#"+analysisId,new Timestamp(System.currentTimeMillis())));
                    break;

                case 6:
                    System.out.print("Enter Malware Analysis ID:");
                    int id=Integer.parseInt(scanner.nextLine());
                    malwareAnalysisController.deleteMalwareAnalysis(id);
                    if(malwareAnalysisController.getMalwareAnalysisById(id)==null)
                    {
                        System.out.print("MalwareAnalysis#"+id+" deleted successfully!");
                    }
                    logController.addLog(new Log(user.getUserId(), "DELETED MALWARE ANALYSIS REPORT#"+id,new Timestamp(System.currentTimeMillis())));

                case 7:
                    System.out.print("Enter Incident ID linked to this sample: ");
                    int incidentId = Integer.parseInt(scanner.nextLine());

                    System.out.print("Enter Malware Sample Name: ");
                    String name = scanner.nextLine();

                    System.out.print("Enter File Hash (MD5/SHA256): ");
                    String fileHash = scanner.nextLine();

                    System.out.print("Enter File Size: ");
                    long fileSize = (long)Integer.parseInt(scanner.nextLine());

                
                    MalwareSample newSample = new MalwareSample(incidentId, name, fileHash, fileSize,user.getUserId());
                    malwareSampleController.addMalwareSample(newSample);
                    System.out.println("Malware Sample added successfully.");
                    logController.addLog(new Log(user.getUserId(), "ADDED NEW MALWARE SAMPLE",new Timestamp(System.currentTimeMillis())));
                    break;
                
                case 8:
                    System.out.print("Enter Malware Sample ID to update: ");
                    int sampleId = Integer.parseInt(scanner.nextLine());

                    MalwareSample existingSample = malwareSampleController.getMalwareSampleById(sampleId);
                    if (existingSample == null) {
                        System.out.println("Sample not found.");
                        break;
                    }

                    System.out.println("Enter a choice to Update:");
                    System.out.println("1. All Details of the Sample");
                    System.out.println("2. Specific Detail of the Sample");

                    int choi = -1;
                    while (choi != 1 && choi != 2) {
                        try {
                            choi = Integer.parseInt(scanner.nextLine());
                            if (choi != 1 && choi != 2) {
                                System.out.println("Invalid choice. Enter 1 or 2.");
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("Please enter a number.");
                        }
                    }

                    if (choi == 1) {
                        System.out.print("New Incident ID: ");
                        existingSample.setIncidentId(Integer.parseInt(scanner.nextLine()));

                        System.out.print("New File Name: ");
                        existingSample.setFileName(scanner.nextLine());

                        System.out.print("New File Hash: ");
                        existingSample.setFileHash(scanner.nextLine());

                        System.out.print("New File Size: ");
                        existingSample.setFileSize(Long.parseLong(scanner.nextLine())); // string → long

                        existingSample.setUploadDate(new Timestamp(System.currentTimeMillis())); // auto update timestamp

                        System.out.print("New Uploaded By User ID: ");
                        existingSample.setUploadedBy(Integer.parseInt(scanner.nextLine()));

                        malwareSampleController.updateMalwareSample(sampleId, existingSample);
                        System.out.println("Malware Sample updated.");
                    } 
                    else if (choi == 2) {
                        System.out.println("Select Column to Update:");
                        System.out.println("1. Incident ID");
                        System.out.println("2. File Name");
                        System.out.println("3. File Hash");
                        System.out.println("4. File Size");
                        System.out.println("5. Upload Date");
                        System.out.println("6. Uploaded By");

                        int ucho = -1;
                        while (ucho < 1 || ucho > 6) {
                            try {
                                ucho = Integer.parseInt(scanner.nextLine());
                                if (ucho < 1 || ucho > 6) {
                                    System.out.println("Invalid number, Try again.");
                                }
                            } catch (NumberFormatException e) {
                                System.out.println("Please enter a number.");
                            }
                        }

                        String col = "";
                        Object val = null;

                        if (ucho == 1) {
                            col = "incident_id";
                            System.out.print("Enter new Incident ID: ");
                            val = Integer.parseInt(scanner.nextLine());
                        } else if (ucho == 2) {
                            col = "file_name";
                            System.out.print("Enter new File Name: ");
                            val = scanner.nextLine();
                        } else if (ucho == 3) {
                            col = "file_hash";
                            System.out.print("Enter new File Hash: ");
                            val = scanner.nextLine();
                        } else if (ucho == 4) {
                            col = "file_size";
                            System.out.print("Enter new File Size: ");
                            val = Long.parseLong(scanner.nextLine()); 
                        } else if (ucho == 5) {
                            col = "upload_date";
                            val = new Timestamp(System.currentTimeMillis()); 
                        } else if (ucho == 6) {
                            col = "uploaded_by";
                            System.out.print("Enter new User ID: ");
                            val = Integer.parseInt(scanner.nextLine());
                        }

                        malwareSampleController.updateColMalwareSample(sampleId, col, val);
                        System.out.println("Malware Sample updated successfully.");
                    }
                    break;

            } 

        } while (choice != 0);
    }
}