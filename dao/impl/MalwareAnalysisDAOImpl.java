package dao.impl;

import dao.interfaces.MalwareAnalysisDAO;
import models.MalwareAnalysis;
import models.enums.Enumeration.RiskLevel;
import util.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MalwareAnalysisDAOImpl implements MalwareAnalysisDAO {
    
    private String INSERT_MALWARE_ANALYSIS = "INSERT INTO malware_analysis (sample_id, static_analysis, dynamic_analysis, risk_level, analysis_date, analyzed_by) VALUES (?, ?, ?, ?, NOW(), ?)";
    private String SELECT_BY_ID = "SELECT * FROM malware_analysis WHERE analysis_id = ?";
    private String SELECT_ALL_ANALYSES = "SELECT * FROM malware_analysis";
    private String UPDATE_ANALYSIS = "UPDATE malware_analysis SET static_analysis=?, dynamic_analysis=?, risk_level=?, analyzed_by=? WHERE analysis_id=?";
    private String DELETE_ANALYSIS = "DELETE FROM malware_analysis WHERE analysis_id = ?";
    
    @Override
    public void addMalwareAnalysis(MalwareAnalysis analysis) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement stmt = conn.prepareStatement(INSERT_MALWARE_ANALYSIS)) {
            stmt.setInt(1, analysis.getSampleId());
            stmt.setString(2, analysis.getStaticAnalysis());
            stmt.setString(3, analysis.getDynamicAnalysis());
            stmt.setString(4, analysis.getRiskLevel().name());
            stmt.setInt(5, analysis.getAnalyzedBy());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public MalwareAnalysis getMalwareAnalysisById(int analysisId) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement stmt = conn.prepareStatement(SELECT_BY_ID)) {
            stmt.setInt(1, analysisId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new MalwareAnalysis(
                    rs.getInt("analysis_id"),
                    rs.getInt("sample_id"),
                    rs.getString("static_analysis"),
                    rs.getString("dynamic_analysis"),
                    RiskLevel.valueOf(rs.getString("risk_level")),
                    rs.getTimestamp("analysis_date"),
                    rs.getInt("analyzed_by")
                    );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    @Override
    public List<MalwareAnalysis> getAllMalwareAnalyses() {
        List<MalwareAnalysis> list = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
        Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(SELECT_ALL_ANALYSES);
            while (rs.next()) {
                list.add(new MalwareAnalysis(
                    rs.getInt("analysis_id"),
                    rs.getInt("sample_id"),
                    rs.getString("static_analysis"),
                    rs.getString("dynamic_analysis"),
                    RiskLevel.valueOf(rs.getString("risk_level")),
                    rs.getTimestamp("analysis_date"),
                    rs.getInt("analyzed_by")
                    ));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return list;
        }
        
        @Override
        public void updateMalwareAnalysis(int id,MalwareAnalysis analysis) {
            try (Connection conn = DatabaseConnection.getConnection();
            PreparedStatement stmt = conn.prepareStatement(UPDATE_ANALYSIS)) {
            stmt.setString(1, analysis.getStaticAnalysis());
            stmt.setString(2, analysis.getDynamicAnalysis());
            stmt.setString(3, analysis.getRiskLevel().name());
            stmt.setInt(4, analysis.getAnalyzedBy());
            stmt.setInt(5, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void deleteMalwareAnalysis(int analysisId) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement stmt = conn.prepareStatement(DELETE_ANALYSIS)) {
            stmt.setInt(1, analysisId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void updateColumnMalwareAnalysis(int id,String col,Object val)
    {
        final String UPDATE_COL_ANALYSIS = "UPDATE malware_analysis SET "+col+"= ? WHERE analysis_id=?";
        try(Connection conn = DatabaseConnection.getConnection();
        PreparedStatement pstmt = conn.prepareStatement(UPDATE_COL_ANALYSIS))
        {
            if (val instanceof Integer) 
            {
                pstmt.setInt(1, (Integer) val);
            }
            else if (val instanceof Enum<?>) 
            {
                pstmt.setString(1, ((Enum<?>) val).name()); 
            }
            else if (val instanceof java.sql.Timestamp) 
            {
                pstmt.setTimestamp(1, (java.sql.Timestamp) val);
            }
            else 
            {
                pstmt.setObject(1, val); 
            }

            pstmt.setInt(2, id);
            pstmt.executeUpdate();
            System.out.println("Malware Analysis column updated successfully!");

        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }

    @Override
    public List<MalwareAnalysis> getMalwareAnalysesBySampleId(int sampleId)
    {
        List<MalwareAnalysis> ma=new ArrayList<>();
        final String SELECT_ANALYSIS_BY_SAMPLEID = "SELECT * FROM malware_analysis WHERE sample_id = ?";
        try(Connection conn = DatabaseConnection.getConnection();
        PreparedStatement pstmt = conn.prepareStatement(SELECT_ANALYSIS_BY_SAMPLEID))
        {
            ResultSet rs=pstmt.executeQuery();
            while(rs.next())
            {
                ma.add(new MalwareAnalysis(   rs.getInt("analysis_id"),
                    rs.getInt("sample_id"),
                    rs.getString("static_analysis"),
                    rs.getString("dynamic_analysis"),
                    RiskLevel.valueOf(rs.getString("risk_level")),
                    rs.getTimestamp("analysis_date"),
                    rs.getInt("analyzed_by")
                    ));
            }
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
        return ma;
    }
}

