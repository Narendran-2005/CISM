package dao.impl;

import dao.interfaces.MalwareSampleDAO;
import models.MalwareSample;
import util.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MalwareSampleDAOImpl implements MalwareSampleDAO {
    private String UPDATE_SAMPLE = "UPDATE malware_samples SET incident_id=?, file_name=?, file_hash=?, file_size=?, uploaded_by=? WHERE sample_id=?";
    private String INSERT_SAMPLE = "INSERT INTO malware_samples (incident_id, file_name, file_hash, file_size, upload_date, uploaded_by) VALUES (?, ?, ?, ?, NOW(), ?)";
    private String SELECT_SAMPLES_BY_ID = "SELECT * FROM malware_samples WHERE sample_id = ?";
    private String SELECT_ALL_SAMPLES = "SELECT * FROM malware_samples";
    private String DELETE_SAMPLE = "DELETE FROM malware_samples WHERE sample_id = ?";

    @Override
    public void addMalwareSample(MalwareSample sample) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement stmt = conn.prepareStatement(INSERT_SAMPLE)) {
            stmt.setInt(1, sample.getIncidentId());
            stmt.setString(2, sample.getFileName());
            stmt.setString(3, sample.getFileHash());
            stmt.setLong(4, sample.getFileSize());
            stmt.setInt(5, sample.getUploadedBy());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public MalwareSample getMalwareSampleById(int sampleId) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement stmt = conn.prepareStatement(SELECT_SAMPLES_BY_ID)) {
            stmt.setInt(1, sampleId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new MalwareSample(
                        rs.getInt("sample_id"),
                        rs.getInt("incident_id"),
                        rs.getString("file_name"),
                        rs.getString("file_hash"),
                        rs.getLong("file_size"),
                        rs.getTimestamp("upload_date"),
                        rs.getInt("uploaded_by")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<MalwareSample> getAllMalwareSamples() {
        List<MalwareSample> list = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
        Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(SELECT_ALL_SAMPLES);
            while (rs.next()) {
                list.add(new MalwareSample(
                        rs.getInt("sample_id"),
                        rs.getInt("incident_id"),
                        rs.getString("file_name"),
                        rs.getString("file_hash"),
                        rs.getLong("file_size"),
                        rs.getTimestamp("upload_date"),
                        rs.getInt("uploaded_by")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public void updateMalwareSample(int id, MalwareSample sample) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement pstmt = conn.prepareStatement(UPDATE_SAMPLE)) {
            pstmt.setInt(1, sample.getIncidentId());
            pstmt.setString(2, sample.getFileName());
            pstmt.setString(3, sample.getFileHash());
            pstmt.setLong(4, sample.getFileSize());
            pstmt.setInt(5, sample.getUploadedBy());
            pstmt.setInt(6, id);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

   
    @Override
    public void deleteMalwareSample(int sampleId) {
        try (Connection conn = DatabaseConnection.getConnection();
        PreparedStatement stmt = conn.prepareStatement(DELETE_SAMPLE)) {
            stmt.setInt(1, sampleId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void updateColMalwareSample(int id,String col,Object val)
    {
        final String UPDATE_COL_ANALYSIS = "UPDATE malware_sample SET "+col+"= ? WHERE sample_id=?";
        try(Connection conn = DatabaseConnection.getConnection();
        PreparedStatement pstmt = conn.prepareStatement(UPDATE_COL_ANALYSIS))
        {
            if (val instanceof Integer) 
            {
                pstmt.setInt(1, (Integer) val);
            }
            else if (val instanceof Enum<?>) 
            {
                pstmt.setString(1, ((Enum<?>) val).name()); 
            }
            else if (val instanceof java.sql.Timestamp) 
            {
                pstmt.setTimestamp(1, (java.sql.Timestamp) val);
            }
            else 
            {
                pstmt.setObject(1, val); 
            }

            pstmt.setInt(2, id);
            pstmt.executeUpdate();
            System.out.println("Malware Analysis column updated successfully!");

        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }

    public MalwareSample getMalwareSampleByIncidentId(int incId)
    {
        final String SELECT_MALWARE_SAMPLE_BY_INCIDENT_ID="SELECT * FROM malware_samples WHERE incident_id=?";
        try(Connection conn = DatabaseConnection.getConnection();
        PreparedStatement pstmt = conn.prepareStatement(SELECT_MALWARE_SAMPLE_BY_INCIDENT_ID);)
        {
            pstmt.setInt(1, incId);
            ResultSet rs=pstmt.executeQuery();
            if(rs.next())
            {
                return new MalwareSample(rs.getInt("sample_id"),
                            rs.getInt("incident_id"),
                            rs.getString("file_name"),
                            rs.getString("file_hash"),
                            rs.getLong("file_size"),
                            rs.getTimestamp("upload_date"),
                            rs.getInt("uploaded_by")
                    );
            }

        }
        catch(SQLException e)
        {   
            e.printStackTrace();
        }
        return null;
    }
}
